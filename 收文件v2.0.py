# -*- coding: utf-8 -*-
import os
import shutil
import stat
from datetime import datetime
import re
import pandas as pd
# Form implementation generated from reading ui file 'AAA.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDateTime
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1363, 1058)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(30, -40, 1291, 1731))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.widget = QtWidgets.QWidget(self.page)
        self.widget.setGeometry(QtCore.QRect(630, 270, 511, 641))
        self.widget.setObjectName("widget")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("AcadEref")
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_13.addWidget(self.label)
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.widget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        self.textBrowser_4.setFont(font)
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.verticalLayout_13.addWidget(self.textBrowser_4)
        self.widget1 = QtWidgets.QWidget(self.page)
        self.widget1.setGeometry(QtCore.QRect(20, 50, 568, 871))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.pushButton = QtWidgets.QPushButton(self.widget1)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_10.addWidget(self.pushButton)
        self.verticalLayout_11.addLayout(self.verticalLayout_10)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.tableWidget = QtWidgets.QTableWidget(self.widget1)
        self.tableWidget.setMaximumSize(QtCore.QSize(564, 16777215))
        self.tableWidget.setRowCount(29)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.verticalLayout_8.addWidget(self.tableWidget)
        self.label_3 = QtWidgets.QLabel(self.widget1)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_8.addWidget(self.label_3)
        self.textBrowser = QtWidgets.QTextBrowser(self.widget1)
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_8.addWidget(self.textBrowser)
        self.verticalLayout_9.addLayout(self.verticalLayout_8)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_12 = QtWidgets.QLabel(self.widget1)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_6.addWidget(self.label_12)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_5.setText("")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.verticalLayout_6.addWidget(self.lineEdit_5)
        self.label_11 = QtWidgets.QLabel(self.widget1)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_6.addWidget(self.label_11)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.verticalLayout_6.addWidget(self.lineEdit_6)
        self.horizontalLayout_3.addLayout(self.verticalLayout_6)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_4 = QtWidgets.QLabel(self.widget1)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)
        self.lineEdit = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_5.addWidget(self.lineEdit)
        self.label_5 = QtWidgets.QLabel(self.widget1)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_5.addWidget(self.lineEdit_2)
        self.horizontalLayout_3.addLayout(self.verticalLayout_5)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_9 = QtWidgets.QLabel(self.widget1)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_4.addWidget(self.label_9)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout_4.addWidget(self.lineEdit_3)
        self.label_10 = QtWidgets.QLabel(self.widget1)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_4.addWidget(self.label_10)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout_4.addWidget(self.lineEdit_4)
        self.horizontalLayout_3.addLayout(self.verticalLayout_4)
        self.verticalLayout_7.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_3.addWidget(self.pushButton_3)
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.widget1)
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.verticalLayout_3.addWidget(self.textBrowser_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_7 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_2.addWidget(self.pushButton_7)
        self.pushButton_6 = QtWidgets.QPushButton(self.widget1)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_2.addWidget(self.pushButton_6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.checkBox_xuexiao = QtWidgets.QCheckBox(self.widget1)
        self.checkBox_xuexiao.setObjectName("checkBox_xuexiao")
        self.verticalLayout.addWidget(self.checkBox_xuexiao)
        self.lineEdit_xuexiao = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_xuexiao.setEnabled(False)
        self.lineEdit_xuexiao.setObjectName("lineEdit_xuexiao")
        self.verticalLayout.addWidget(self.lineEdit_xuexiao)
        self.checkBox_xueyuan = QtWidgets.QCheckBox(self.widget1)
        self.checkBox_xueyuan.setObjectName("checkBox_xueyuan")
        self.verticalLayout.addWidget(self.checkBox_xueyuan)
        self.lineEdit_xueyuan = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_xueyuan.setEnabled(False)
        self.lineEdit_xueyuan.setObjectName("lineEdit_xueyuan")
        self.verticalLayout.addWidget(self.lineEdit_xueyuan)
        self.checkBox_zhuanye = QtWidgets.QCheckBox(self.widget1)
        self.checkBox_zhuanye.setObjectName("checkBox_zhuanye")
        self.verticalLayout.addWidget(self.checkBox_zhuanye)
        self.lineEdit_zhuanye = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_zhuanye.setEnabled(False)
        self.lineEdit_zhuanye.setObjectName("lineEdit_zhuanye")
        self.verticalLayout.addWidget(self.lineEdit_zhuanye)
        self.checkBox_banji = QtWidgets.QCheckBox(self.widget1)
        self.checkBox_banji.setObjectName("checkBox_banji")
        self.verticalLayout.addWidget(self.checkBox_banji)
        self.lineEdit_banji = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_banji.setEnabled(False)
        self.lineEdit_banji.setObjectName("lineEdit_banji")
        self.verticalLayout.addWidget(self.lineEdit_banji)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.label_6 = QtWidgets.QLabel(self.widget1)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout.addWidget(self.label_6)
        self.lineEdit_zhuti = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_zhuti.setObjectName("lineEdit_zhuti")
        self.horizontalLayout.addWidget(self.lineEdit_zhuti)
        self.label_7 = QtWidgets.QLabel(self.widget1)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout_7.addLayout(self.verticalLayout_3)
        self.verticalLayout_9.addLayout(self.verticalLayout_7)
        self.verticalLayout_11.addLayout(self.verticalLayout_9)
        self.widget2 = QtWidgets.QWidget(self.page)
        self.widget2.setGeometry(QtCore.QRect(629, 46, 511, 216))
        self.widget2.setObjectName("widget2")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_8 = QtWidgets.QLabel(self.widget2)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_12.addWidget(self.label_8)
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.widget2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.textBrowser_2.setFont(font)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.verticalLayout_12.addWidget(self.textBrowser_2)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(520, 20, 72, 15))
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1363, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.actionStudentPage = QtWidgets.QAction(MainWindow)
        self.actionStudentPage.setObjectName("actionStudentPage")
        self.actionTeacherPage = QtWidgets.QAction(MainWindow)
        self.actionTeacherPage.setObjectName("actionTeacherPage")
        self.menu.addAction(self.actionStudentPage)
        self.menu.addAction(self.actionTeacherPage)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "日志栏"))
        self.pushButton.setText(_translate("MainWindow", "导入文件"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "班级"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "学号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "姓名"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "备注"))
        self.label_3.setText(_translate("MainWindow", "拖入文件以寻找根目录"))
        self.label_12.setText(_translate("MainWindow", "时间始(点我显示当前时间减12小时)"))
        self.lineEdit_5.setPlaceholderText(_translate("MainWindow", "2024-12-11 12:00:00"))
        self.label_11.setText(_translate("MainWindow", "时间末(点我自动显示当前时间)"))
        self.lineEdit_6.setPlaceholderText(_translate("MainWindow", "2024-12-11 23:59:59"))
        self.label_4.setText(_translate("MainWindow", "学号始(点我自动读取)"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "202205001"))
        self.label_5.setText(_translate("MainWindow", "学号末(点我自动读取)"))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "202205031"))
        self.label_9.setText(_translate("MainWindow", "第二关键词"))
        self.label_10.setText(_translate("MainWindow", "第三关键词"))
        self.pushButton_3.setText(_translate("MainWindow", "选择文件输出路径"))
        self.textBrowser_3.setPlaceholderText(_translate("MainWindow", "C:\\Users\\lcy15\\Desktop\\AAA保存"))
        self.pushButton_4.setText(_translate("MainWindow", "文件整理"))
        self.pushButton_5.setText(_translate("MainWindow", "删除重复文件"))
        self.pushButton_7.setText(_translate("MainWindow", "整理遗漏作业"))
        self.pushButton_6.setText(_translate("MainWindow", "一键统一文件名"))
        self.checkBox_xuexiao.setText(_translate("MainWindow", "添加学校"))
        self.lineEdit_xuexiao.setPlaceholderText(_translate("MainWindow", "请输入学校名字"))
        self.checkBox_xueyuan.setText(_translate("MainWindow", "添加学院"))
        self.lineEdit_xueyuan.setPlaceholderText(_translate("MainWindow", "请输入学院名字"))
        self.checkBox_zhuanye.setText(_translate("MainWindow", "添加专业"))
        self.lineEdit_zhuanye.setPlaceholderText(_translate("MainWindow", "请输入专业名字"))
        self.checkBox_banji.setText(_translate("MainWindow", "添加班级"))
        self.lineEdit_banji.setPlaceholderText(_translate("MainWindow", "请输入班级名字"))
        self.label_6.setText(_translate("MainWindow", "学号 + 姓名 +"))
        self.lineEdit_zhuti.setPlaceholderText(_translate("MainWindow", "请输入主题"))
        self.label_7.setText(_translate("MainWindow", "+ 文件名后缀"))
        self.label_8.setText(_translate("MainWindow", "重要提示"))
        self.label_2.setText(_translate("MainWindow", "教师"))
        self.menu.setTitle(_translate("MainWindow", "使用身份"))
        self.actionStudentPage.setText(_translate("MainWindow", "学生"))
        self.actionTeacherPage.setText(_translate("MainWindow", "小组关系"))
class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.duplicate_student_ids = []
        self.setupUi(self)
        self.setAcceptDrops(True)  # 启用拖拽事件

        self.pushButton.clicked.connect(self.loadExcelData)
        self.actionStudentPage.triggered.connect(self.show_student_page)
        self.actionTeacherPage.triggered.connect(self.show_teacher_page)
        self.pushButton_3.clicked.connect(self.select_output_folder)
        self.pushButton_4.clicked.connect(self.ZhengLi)
        self.pushButton_5.clicked.connect(self.Del)
        self.pushButton_6.clicked.connect(self.One)
        self.pushButton_7.clicked.connect(self.Last)
        self.checkBox_xuexiao.toggled.connect(self.toggle_xuexiao_input)
        self.checkBox_xueyuan.toggled.connect(self.toggle_xueyuan_input)
        self.checkBox_zhuanye.toggled.connect(self.toggle_zhuanye_input)
        self.checkBox_banji.toggled.connect(self.toggle_banji_input)
        # 绑定 QLabel 点击事件
        self.label_12.mousePressEvent = self.on_label_click1  # 设置 label 的点击事件
        self.label_11.mousePressEvent = self.on_label_click2  # 设置 label 的点击事件
        self.label_4.mousePressEvent = self.on_label_click3  # 设置 label 的点击事件
        self.label_5.mousePressEvent = self.on_label_click4  # 设置 label 的点击事件

    def on_label_click1(self, event):
        # 获取当前时间
        current_time = QDateTime.currentDateTime()

        # 减去12小时
        current_time = current_time.addSecs(-12 * 3600)  # 12小时 = 12 * 3600秒

        # 格式化时间为 'YYYY-MM-DD HH:MM:SS' 格式
        formatted_time = current_time.toString('yyyy-MM-dd HH:mm:ss')

        # 将结果显示到 lineEdit_5 中
        self.lineEdit_5.setText(formatted_time)
    def on_label_click2(self, event):
        # 获取当前时间
        current_time = QDateTime.currentDateTime()

        # 格式化时间为 'YYYY-MM-DD HH:MM:SS' 格式
        formatted_time = current_time.toString('yyyy-MM-dd HH:mm:ss')

        # 将结果显示到 lineEdit_5 中
        self.lineEdit_6.setText(formatted_time)

    def on_label_click3(self, event):
        # 获取 QTableWidget 中第一行第二列的值
        cell_value = self.tableWidget.item(0, 1).text()  # 获取第一行第二列的单元格文本

        # 将值显示到 lineEdit_5 中
        self.lineEdit.setText(cell_value)
    def on_label_click4(self, event):
        # 获取表格的最后一行第二列的值
        row_count = self.tableWidget.rowCount()
        last_row = row_count - 1  # 最后一行的索引是行数 - 1
        second_column_value = self.tableWidget.item(last_row, 1).text()  # 获取第二列的值

        # 将值显示在 lineEdit 中
        self.lineEdit_2.setText(second_column_value)
    def toggle_xuexiao_input(self, checked):
        self.lineEdit_xuexiao.setEnabled(checked)

    def toggle_xueyuan_input(self, checked):
        self.lineEdit_xueyuan.setEnabled(checked)

    def toggle_zhuanye_input(self, checked):
        self.lineEdit_zhuanye.setEnabled(checked)

    def toggle_banji_input(self, checked):
        self.lineEdit_banji.setEnabled(checked)

    def show_student_page(self):
        self.stackedWidget.setCurrentIndex(0)

    def show_teacher_page(self):
        self.stackedWidget.setCurrentIndex(1)

    def dragEnterEvent(self, event: QtGui.QDragEnterEvent):
        """
        当文件拖拽进入窗口时触发
        """
        if event.mimeData().hasUrls():  # 判断是否是文件
            event.acceptProposedAction()  # 接受拖拽事件
        else:
            event.ignore()

    def dropEvent(self, event: QtGui.QDropEvent):
        """
        当文件被放下时触发
        """
        if event.mimeData().hasUrls():  # 判断是否是文件
            self.textBrowser.clear()  # 清空 QTextBrowser 内容
            for url in event.mimeData().urls():  # 遍历拖拽的所有文件
                file_path = url.toLocalFile()  # 获取文件的绝对路径
                self.textBrowser.append(file_path)  # 显示路径
            event.acceptProposedAction()  # 接受放下的事件
        else:
            event.ignore()

    def loadExcelData(self):
        # 打开文件选择对话框
        file_path, _ = QFileDialog.getOpenFileName(self, "选择Excel文件", "", "Excel Files (*.xlsx *.xls)")

        if file_path:
            try:
                # 保存文件路径为类的成员变量
                self.file_path = file_path

                # 使用pandas读取Excel文件
                df = pd.read_excel(file_path)

                # 设置表格行列
                self.tableWidget.setRowCount(len(df))
                self.tableWidget.setColumnCount(len(df.columns))
                self.tableWidget.setHorizontalHeaderLabels(df.columns)

                # 填充表格内容
                for i, row in df.iterrows():
                    for j, value in enumerate(row):
                        # 如果是NaN，则将其替换为空字符串
                        if pd.isna(value):
                            value = ""  # 或者替换为其他值，如"无数据"
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(value)))

            except Exception as e:
                print(f"加载Excel文件时出错: {e}")
    def select_output_folder(self):
        """
        点击按钮时弹出选择文件夹对话框，选择一个文件夹路径
        """
        folder_path = QFileDialog.getExistingDirectory(self, "选择输出文件夹", "")  # 获取文件夹路径

        if folder_path:
            # 如果用户选择了文件夹，显示路径
            self.textBrowser_3.setText(f"{folder_path}")
        else:
            # 如果用户取消选择
            self.textBrowser_3.setText("没有选择文件夹。")

    # 整理文件
    def ZhengLi(self):
        path = self.textBrowser.toPlainText()
        start_id = int(self.lineEdit.text())
        end_id = int(self.lineEdit_2.text())
        start_time_str = self.lineEdit_5.text()
        end_time_str = self.lineEdit_6.text()
        Two_guanjianci = self.lineEdit_3.text()
        Three_guanjianci = self.lineEdit_4.text()

        # 将时间字符串转换为时间戳
        start_time = datetime.strptime(start_time_str, '%Y-%m-%d %H:%M:%S').timestamp()
        end_time = datetime.strptime(end_time_str, '%Y-%m-%d %H:%M:%S').timestamp()

        index = -1
        count = 0
        for i, char in enumerate(path):
            if char == '/':
                count += 1
                if count == 3:  # 找到第三个 '/'
                    index = i
                    break

        # 截取第四个 '/' 之前的字符（不包括第三个 '/'）
        if index != -1:
            path = path[:index]
            print(path)
        else:
            print("本程序不适合您")

        def find_files_by_identifier_and_time(identifier, directory, start_time, end_time, two_keyword, three_keyword):
            matched_files = []

            # 遍历指定目录及其子目录
            for root, dirs, files in os.walk(directory):
                for file in files:
                    # 如果文件名中包含学号并且包含第二和第三关键词（如果有）
                    if identifier in file and (two_keyword in file if two_keyword else True) and (
                    three_keyword in file if three_keyword else True):
                        file_path = os.path.join(root, file)
                        file_mtime = os.path.getmtime(file_path)  # 获取文件的修改时间

                        # 检查文件修改时间是否在指定时间范围内
                        if start_time <= file_mtime <= end_time:
                            matched_files.append(file_path)  # 将匹配的文件路径加入列表

            return matched_files

        def find_files_for_range_with_time(start, end, directory, start_time, end_time, two_keyword, three_keyword):
            all_files = []
            missing_ids = []  # 用来记录没有找到文件的学号

            # 遍历学号范围
            for i in range(start, end + 1):
                identifier = str(i).zfill(9)  # 补充前导零，确保是9位数
                files = find_files_by_identifier_and_time(identifier, directory, start_time, end_time, two_keyword,
                                                          three_keyword)

                if not files:  # 如果没有找到文件
                    missing_ids.append(identifier)  # 将没有找到文件的学号添加到列表

                all_files.extend(files)  # 将每个学号的文件加入总文件列表

            return all_files, missing_ids  # 返回匹配的文件和缺失的学号

        def copy_files_to_destination(files, destination_folder):
            # 遍历文件并复制到目标文件夹
            for file in files:
                try:
                    shutil.copy(file, destination_folder)  # 复制文件
                    self.textBrowser_4.append("------------------------------------------------")
                    self.textBrowser_4.append(f"文件已整理完毕: {file}")
                except Exception as e:
                    self.textBrowser_4.append(f"文件整理失败: {file}, 错误: {e}")

        # 查找文件并获得缺失的学号
        files, missing_ids = find_files_for_range_with_time(start_id, end_id, path, start_time, end_time,
                                                            Two_guanjianci, Three_guanjianci)

        # 复制文件到目标文件夹
        copy_files_to_destination(files, self.textBrowser_3.toPlainText())

        # 如果有缺失的学号，提醒用户
        if missing_ids:
            missing_ids_str = ', '.join(missing_ids)
            self.textBrowser_2.append(f"学号为 {missing_ids_str}的同学没有交作业")
        else:
            self.textBrowser_2.append("所有学号都已找到对应文件。")

    def Del(self):
        # 获取用户输入的文件路径
        folder_path = self.textBrowser_3.toPlainText()

        # 学号范围
        start_id = int(self.lineEdit.text())
        end_id = int(self.lineEdit_2.text())
        student_ids = [str(i) for i in range(start_id, end_id + 1)]

        # 存储文件路径和对应的学号
        files_by_id = {}
        # 清空之前的重复学号列表
        self.duplicate_student_ids = []

        # 遍历目录，查找符合条件的文件
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                # 正则表达式匹配学号
                match = re.search(r'\d{9}', file)
                if match:
                    student_id = match.group()
                    if student_id in student_ids:
                        if student_id not in files_by_id:
                            files_by_id[student_id] = []
                        files_by_id[student_id].append(os.path.join(root, file))

        # 删除重复学号的文件
        deleted_files = []
        for student_id, file_paths in files_by_id.items():
            if len(file_paths) > 1:  # 如果一个学号对应多个文件
                self.duplicate_student_ids.append(student_id)  # 记录重复学号
                for file_path in file_paths:
                    try:
                        # 改变文件的权限为可写
                        os.chmod(file_path, stat.S_IWRITE)
                        os.remove(file_path)  # 删除文件
                        deleted_files.append(file_path)
                        self.textBrowser_4.append('------------------------------------------------')
                        self.textBrowser_4.append(f"删除了{file_path}")
                    except PermissionError:
                        self.textBrowser_4.append(f"无法删除文件: {file_path}, 权限不足")

        # 如果没有删除任何文件，提示用户
        if not deleted_files:
            self.textBrowser_4.append("没有找到重复文件，所有文件都是唯一的。")
        else:
            # 提示用户重复学号
            if self.duplicate_student_ids:
                self.textBrowser_2.append(f"以下学号有重复文件：{', '.join(self.duplicate_student_ids)}")
    def One(self):
        def read_excel_for_mapping(excel_file_path):
            """
            读取指定的 Excel 文件，并建立学号与姓名的映射。
            :param excel_file_path: Excel 文件的绝对路径
            :return: 学号与姓名的映射字典，如果读取失败返回 None
            """
            try:
                # 移除路径中的多余引号（防止用户输入时误加引号）
                excel_file_path = excel_file_path.strip('\"')

                # 读取 Excel 文件
                df = pd.read_excel(excel_file_path)

                # 假设学号在第二列（索引1），姓名在第三列（索引2）
                # 强制转换学号和姓名为字符串类型，避免类型错误
                df.iloc[:, 1] = df.iloc[:, 1].astype(str).str.strip()  # 学号
                df.iloc[:, 2] = df.iloc[:, 2].astype(str).str.strip()  # 姓名

                student_mapping = dict(zip(df.iloc[:, 1], df.iloc[:, 2]))

                self.textBrowser_4.append(f"学号与姓名映射加载成功，共加载 {len(student_mapping)} 个学号与姓名映射。")
                return student_mapping
            except Exception as e:
                self.textBrowser_4.append(f"读取Excel文件时发生错误: {e}")
                return None

        def rename_files_in_folder(folder_path, student_mapping, subject=self.lineEdit_zhuti.text()):
            xuexiao_name=self.lineEdit_xuexiao.text().strip()
            xueyuan_name=self.lineEdit_xueyuan.text().strip()
            zhuanye_name=self.lineEdit_zhuanye.text().strip()
            banji_name=self.lineEdit_banji.text().strip()
            """
            遍历文件夹，重命名其中的文件为 学号+姓名+主题+后缀
            :param folder_path: 文件夹路径
            :param student_mapping: 学号与姓名的映射字典
            :param subject: 主题
            """

            try:
                # 9位学号的正则表达式
                student_id_pattern = re.compile(r'\d{9}')

                # 检查文件夹路径是否有效
                if not os.path.exists(folder_path):
                    self.textBrowser_4.append(f"文件夹路径 '{folder_path}' 不存在。请检查路径是否正确。")
                    return

                # 遍历文件夹中的所有文件
                for root, dirs, files in os.walk(folder_path):
                    for file in files:
                        # 提取文件名和后缀
                        file_name, file_extension = os.path.splitext(file)

                        # 查找文件名中是否包含9位学号
                        match = student_id_pattern.search(file_name)
                        if match:
                            student_id = match.group()  # 获取学号
                            if student_id in student_mapping:
                                # 获取姓名
                                name = student_mapping[student_id]
                                if (xuexiao_name is not None) and (xueyuan_name is not None) and (zhuanye_name is not None) and (banji_name is not None):
                                    new_name = f"{xuexiao_name}{xueyuan_name}{zhuanye_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is not None) and (zhuanye_name is not None) and (banji_name is None):
                                    new_name = f"{xuexiao_name}{xueyuan_name}{zhuanye_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is not None) and (zhuanye_name is None) and (banji_name is not None):
                                    new_name = f"{xuexiao_name}{xueyuan_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is not None) and (zhuanye_name is not None) and (banji_name is not None):
                                    new_name = f"{xueyuan_name}{zhuanye_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is None) and (zhuanye_name is not None) and (banji_name is not None):
                                    new_name = f"{xuexiao_name}{zhuanye_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is not None) and (zhuanye_name is  None) and (banji_name is  None):
                                    new_name = f"{xuexiao_name}{xueyuan_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is None) and (zhuanye_name is not None) and (banji_name is None):
                                    new_name = f"{xuexiao_name}{zhuanye_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is None) and (zhuanye_name is None) and (banji_name is not None):
                                    new_name = f"{xuexiao_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is not None) and (zhuanye_name is not None) and (banji_name is None):
                                    new_name = f"{xueyuan_name}{zhuanye_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is not None) and (zhuanye_name is None) and (banji_name is not None):
                                    new_name = f"{xueyuan_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is  None) and (xueyuan_name is  None) and (zhuanye_name is not None) and (banji_name is not None):
                                    new_name = f"{zhuanye_name}{banji_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is not None) and (xueyuan_name is None) and (zhuanye_name is None) and (banji_name is None):
                                    new_name = f"{xuexiao_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is not None) and (zhuanye_name is None) and (banji_name is None):
                                    new_name = f"{xueyuan_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is None) and (zhuanye_name is not None) and (banji_name is None):
                                    new_name = f"{zhuanye_name}{student_id}{name}{subject}{file_extension}"
                                elif (xuexiao_name is None) and (xueyuan_name is None) and (zhuanye_name is None) and (banji_name is not None):
                                    new_name = f"{banji_name}{student_id}{name}{subject}{file_extension}"

                                # 获取完整的文件路径
                                old_file_path = os.path.join(root, file)
                                new_file_path = os.path.join(root, new_name)

                                # 重命名文件
                                os.rename(old_file_path, new_file_path)

                                # 打印相对路径
                                relative_old_path = os.path.relpath(old_file_path, folder_path)
                                relative_new_path = os.path.relpath(new_file_path, folder_path)

                                self.textBrowser_4.append(f"已重命名文件: {relative_old_path} -> {relative_new_path}")
                            else:
                                self.textBrowser_4.append(f"未找到学号 {student_id} 对应的姓名。")
                        else:
                            self.textBrowser_4.append(f"文件 {file} 中未找到有效的学号。文件名为: {file}")

            except Exception as e:
                self.textBrowser_4.append(f"重命名文件时发生错误: {e}")

        excel_file_path = r"C:\Users\lcy15\Desktop\50班花名册.xlsx"

        # 调用函数读取学号与姓名的映射
        student_mapping = read_excel_for_mapping(excel_file_path)

        if student_mapping:
            # 用户输入文件夹路径
            folder_path = self.textBrowser_3.toPlainText()

            # 转换路径为原始字符串，以防路径问题
            folder_path = folder_path.strip('\"')

            # 调用函数重命名文件
            rename_files_in_folder(folder_path, student_mapping)
        else:
            self.textBrowser_4.append("学号与姓名映射加载失败，无法进行重命名操作。")
    def Last(self):
        # 获取用户输入的文件路径
        folder_path = self.textBrowser_3.toPlainText()

        # 获取起始和终止时间
        start_time_str = self.lineEdit_6.text()  # 获取起始时间
        end_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # 获取当前时间作为终止时间

        # 将时间字符串转换为时间戳
        start_time = datetime.strptime(start_time_str, '%Y-%m-%d %H:%M:%S').timestamp()
        end_time = datetime.strptime(end_time_str, '%Y-%m-%d %H:%M:%S').timestamp()

        # 获取学号列表（之前的操作中已经获得）
        duplicate_student_ids = self.duplicate_student_ids  # 使用之前获取的重复学号列表

        Two_guanjianci = self.lineEdit_3.text()  # 获取第二关键词
        Three_guanjianci = self.lineEdit_4.text()  # 获取第三关键词

        # 截取路径
        path = self.textBrowser.toPlainText()
        index = -1
        count = 0
        for i, char in enumerate(path):
            if char == '/':
                count += 1
                if count == 3:  # 找到第三个 '/'
                    index = i
                    break

        # 截取第四个 '/' 之前的字符（不包括第三个 '/'）
        if index != -1:
            path = path[:index]
            print(path)
        else:
            print("本程序不适合您")

        # 查找文件的功能，支持学号、第二和第三关键词以及时间范围
        def find_files_by_identifier_and_time(identifier, directory, start_time, end_time, two_keyword, three_keyword):
            matched_files = []

            # 遍历指定目录及其子目录
            for root, dirs, files in os.walk(directory):
                for file in files:
                    # 如果文件名中包含学号并且包含第二和第三关键词（如果有）
                    if identifier in file and (two_keyword in file if two_keyword else True) and (
                            three_keyword in file if three_keyword else True):
                        file_path = os.path.join(root, file)
                        file_mtime = os.path.getmtime(file_path)  # 获取文件的修改时间

                        # 检查文件修改时间是否在指定时间范围内
                        if start_time <= file_mtime <= end_time:
                            matched_files.append(file_path)  # 将匹配的文件路径加入列表

            return matched_files

        # 查找文件并将匹配的文件复制到目标文件夹
        def copy_files_to_destination(files, destination_folder):
            for file in files:
                try:
                    shutil.copy(file, destination_folder)  # 复制文件
                    self.textBrowser_4.append("------------------------------------------------")
                    self.textBrowser_4.append(f"文件已整理完毕: {file}")
                except Exception as e:
                    self.textBrowser_4.append(f"文件整理失败: {file}, 错误: {e}")

        # 获取所有匹配的文件
        all_files = []
        for student_id in duplicate_student_ids:
            files = find_files_by_identifier_and_time(student_id, path, start_time, end_time, Two_guanjianci,
                                                      Three_guanjianci)
            all_files.extend(files)  # 将匹配的文件加入到总列表

        # 复制文件到目标文件夹
        copy_files_to_destination(all_files, folder_path)

        # 提示用户文件已经整理完毕
        if all_files:
            self.textBrowser_2.append("所有匹配的文件已整理完毕。")
        else:
            self.textBrowser_2.append("没有找到符合条件的文件。")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())